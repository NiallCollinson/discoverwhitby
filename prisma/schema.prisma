datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enable PostGIS and Vector extensions via migration later

generator client {
  provider = "prisma-client-js"
}

model Property {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  slug          String   @unique
  title         String
  description   String
  bedrooms      Int
  bathrooms     Int
  maxGuests     Int
  latitude      Float
  longitude     Float
  priceNight    Int
  amenities     PropertyAmenity[]
  images        Image[]
  reviews       Review[]
}

model Amenity {
  id      String   @id @default(cuid())
  name    String   @unique
  props   PropertyAmenity[]
}

model PropertyAmenity {
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  amenity    Amenity  @relation(fields: [amenityId], references: [id])
  amenityId  String
  @@id([propertyId, amenityId])
}

model Image {
  id         String   @id @default(cuid())
  url        String
  alt        String
  width      Int
  height     Int
  property   Property? @relation(fields: [propertyId], references: [id])
  propertyId String?
}

model Review {
  id         String   @id @default(cuid())
  source     String
  rating     Int
  comment    String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
}

// Auth & Accounts
model User {
  id             String       @id @default(cuid())
  email          String       @unique
  emailVerified  DateTime?
  name           String?
  image          String?
  role           String       @default("customer") // guest|customer|host_owner|host_member|moderator|admin
  sessions       Session[]
  accounts       Account[]
  twoFactor      TwoFactor?
  hostProfile    HostProfile?
  guestProfile   GuestProfile?
  orgsOwned      Org[]        @relation("OrgOwner")
  orgMemberships OrgMember[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken")
  access_token      String?  @map("accessToken")
  expires_at        Int?     @map("expiresAt")
  token_type        String?  @map("tokenType")
  scope             String?
  id_token          String?  @map("idToken")
  session_state     String?  @map("sessionState")

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  userAgent    String?
  ipHash       String?
  lastActiveAt DateTime @default(now())
  createdAt    DateTime @default(now())
}

model TwoFactor {
  userId   String  @id
  user     User    @relation(fields: [userId], references: [id])
  secret   String
  enabled  Boolean @default(false)
  recovery String[]
}

// Orgs & Membership
model Org {
  id               String      @id @default(cuid())
  name             String
  slug             String      @unique
  ownerId          String
  owner            User        @relation("OrgOwner", fields: [ownerId], references: [id])
  members          OrgMember[]
  hostProfiles     HostProfile[]
  payouts          Payout[]
  kycStatus        String      @default("unverified")
  stripeAccountId  String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model OrgMember {
  id          String   @id @default(cuid())
  orgId       String
  org         Org      @relation(fields: [orgId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  role        String
  permissions String[]
  invitedAt   DateTime?
  joinedAt    DateTime?
}

model HostProfile {
  id                        String   @id @default(cuid())
  userId                    String   @unique
  user                      User     @relation(fields: [userId], references: [id])
  orgId                     String?
  org                       Org?     @relation(fields: [orgId], references: [id])
  businessType              String?
  phone                     String?
  address                   String?
  kycStatus                 String   @default("unverified")
  preferredPayoutCurrency   String?  @default("GBP")
}

model GuestProfile {
  id          String  @id @default(cuid())
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id])
  phone       String?
  preferences Json?
  verifiedId  Boolean @default(false)
}

// Messaging & Notifications
model MessageThread {
  id             String   @id @default(cuid())
  subject        String
  bookingId      String?
  propertyId     String?
  participantIds String[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastMessageAt  DateTime  @default(now())
  messages       Message[]
}

model Message {
  id        String   @id @default(cuid())
  threadId  String
  thread    MessageThread @relation(fields: [threadId], references: [id])
  senderId  String
  body      String
  role      String
  metadata  Json?
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  payload   Json
  readAt    DateTime?
  createdAt DateTime @default(now())
}

model SupportTicket {
  id         String   @id @default(cuid())
  createdBy  String
  assignedTo String?
  status     String   @default("open")
  priority   String   @default("normal")
  subject    String
  body       String
  tags       String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Payout {
  id               String   @id @default(cuid())
  orgId            String
  org              Org      @relation(fields: [orgId], references: [id])
  amountMinor      Int
  currency         String   @default("GBP")
  stripeTransferId String?
  status           String   @default("pending")
  periodStart      DateTime
  periodEnd        DateTime
  createdAt        DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String?
  actorRole String?
  action    String
  target    String
  meta      Json?
  createdAt DateTime @default(now())
}

model SavedSearch {
  id        String   @id @default(cuid())
  userId    String
  query     Json
  name      String?
  createdAt DateTime @default(now())
}
